#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# --- Configuration ---
PROJECT_DIR="/opt/wg-manager"
BACKEND_DIR="$PROJECT_DIR/backend"
FRONTEND_DIR="$PROJECT_DIR/frontend"
SYSTEMD_SERVICE_NAME="wg-manager-backend.service"
NGINX_CONF_NAME="wg-manager"

# --- Helper Functions ---
function print_info {
    echo "INFO: $1"
}

function print_error {
    echo "ERROR: $1" >&2
    exit 1
}

# --- Main Installation Logic ---

# 1. System Update and Dependency Installation
print_info "Updating system packages..."
apt-get update -y
apt-get upgrade -y

print_info "Installing required packages: python3, python3-pip, nodejs, npm, nginx, wireguard..."
apt-get install -y python3 python3-pip nodejs npm nginx wireguard

# Check if installation was successful
command -v python3 >/dev/null 2>&1 || print_error "python3 could not be found."
command -v pip3 >/dev/null 2>&1 || print_error "pip3 could not be found."
command -v node >/dev/null 2>&1 || print_error "nodejs could not be found."
command -v npm >/dev/null 2>&1 || print_error "npm could not be found."
command -v nginx >/dev/null 2>&1 || print_error "nginx could not be found."
command -v wg >/dev/null 2>&1 || print_error "wireguard could not be found."

print_info "System dependencies installed successfully."

# 2. Setup Project Directory
print_info "Setting up project directory at $PROJECT_DIR..."
# The script assumes it's run from the root of the extracted project folder
# e.g., from 'wg-manager-v0.1/' which contains 'backend', 'frontend', 'scripts'
mkdir -p $PROJECT_DIR
cp -r ../backend $PROJECT_DIR/
cp -r ../frontend $PROJECT_DIR/

# 3. Setup Backend (Python)
print_info "Setting up Python backend..."
cd $BACKEND_DIR
pip3 install --upgrade pip setuptools wheel
# Install dependencies including security extras
pip3 install . # This installs dependencies from pyproject.toml

# --- Admin User Creation ---
print_info "Please create an admin user for the web interface."
read -p "Enter admin username: " ADMIN_USERNAME
read -s -p "Enter admin password: " ADMIN_PASSWORD
echo
read -s -p "Confirm admin password: " ADMIN_PASSWORD_CONFIRM
echo

if [ "$ADMIN_PASSWORD" != "$ADMIN_PASSWORD_CONFIRM" ]; then
    print_error "Passwords do not match. Aborting."
fi

# Generate password hash using a Python script
# We need to create this script first
ADMIN_PASSWORD_HASH=$(python3 -c "from backend.security import get_password_hash; print(get_password_hash('$ADMIN_PASSWORD'))")

# Create .env file
print_info "Creating .env file with your credentials..."
cat > $BACKEND_DIR/.env << EOL
# This file is automatically generated by install.sh
SECRET_KEY=$(openssl rand -hex 32)
ADMIN_USERNAME=$ADMIN_USERNAME
ADMIN_PASSWORD_HASH=$ADMIN_PASSWORD_HASH
EOL

# Create the initial database
print_info "Creating database..."
python3 -c "from backend.database import Base, engine; Base.metadata.create_all(bind=engine)"
print_info "Backend setup complete."


# 4. Setup Frontend (Node.js)
print_info "Setting up Node.js frontend..."
cd $FRONTEND_DIR
# Install dependencies
npm install
# Build for production
npm run build
print_info "Frontend setup complete."


# 5. Setup WireGuard Server Keys
print_info "Setting up WireGuard server keys..."
mkdir -p /etc/wireguard
wg genkey | tee /etc/wireguard/server_private_key | wg pubkey > /etc/wireguard/server_public_key
chmod 600 /etc/wireguard/server_private_key
print_info "WireGuard server keys generated."

# 6. Setup Systemd Service for Backend
print_info "Creating systemd service for the backend..."
cat > /etc/systemd/system/$SYSTEMD_SERVICE_NAME << EOL
[Unit]
Description=WireGuard Manager Backend Service
After=network.target

[Service]
User=root
Group=www-data
WorkingDirectory=$BACKEND_DIR
ExecStart=/usr/bin/python3 -m uvicorn main:app --host 0.0.0.0 --port 8000
Restart=always

[Install]
WantedBy=multi-user.target
EOL
print_info "Systemd service file created."

# 7. Setup Nginx Reverse Proxy
print_info "Configuring Nginx reverse proxy for HTTP and WebSocket..."
cat > /etc/nginx/sites-available/$NGINX_CONF_NAME << EOL
server {
    listen 80;
    server_name _; # Replace with your domain if you have one

    location / {
        proxy_pass http://127.0.0.1:3000; # Assuming Next.js runs on port 3000
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    location /_next/ {
        proxy_pass http://127.0.0.1:3000/_next/;
        proxy_set_header Host \$host;
    }

    location /api/ {
        proxy_pass http://127.0.0.1:8000/api/;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
    }

    location /ws/ {
        proxy_pass http://127.0.0.1:8000/ws/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
    }
}
EOL

# Enable the new Nginx site
if [ -L /etc/nginx/sites-enabled/$NGINX_CONF_NAME ]; then
    rm /etc/nginx/sites-enabled/$NGINX_CONF_NAME
fi
if [ -L /etc/nginx/sites-enabled/default ]; then
    rm /etc/nginx/sites-enabled/default
fi
ln -s /etc/nginx/sites-available/$NGINX_CONF_NAME /etc/nginx/sites-enabled/
print_info "Nginx site enabled."

# 8. System Optimization and Hardening
print_info "Applying system optimizations and firewall rules..."

# Enable BBR and FQ for better network performance
cat >> /etc/sysctl.conf << EOL

# Added by WireGuard Manager installer
net.core.default_qdisc=fq
net.ipv4.tcp_congestion_control=bbr
EOL
sysctl -p

# Configure UFW (Uncomplicated Firewall)
apt-get install -y ufw
ufw allow ssh
ufw allow 80/tcp  # HTTP
ufw allow 443/tcp # HTTPS (if you add it later)
ufw allow 51820/udp # WireGuard
ufw --force enable

# 9. Finalize and Start Services
print_info "Reloading systemd, enabling and starting services..."
systemctl daemon-reload
systemctl enable $SYSTEMD_SERVICE_NAME
systemctl start $SYSTEMD_SERVICE_NAME

# Create systemd service for the frontend
print_info "Creating systemd service for the frontend..."
FRONTEND_SERVICE_NAME="wg-manager-frontend.service"
cat > /etc/systemd/system/$FRONTEND_SERVICE_NAME << EOL
[Unit]
Description=WireGuard Manager Frontend Service
After=network.target

[Service]
User=root
# We need to find the full path to npm
ExecStart=/usr/bin/npm start
WorkingDirectory=$FRONTEND_DIR
Restart=always
RestartSec=10
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=wg-frontend

[Install]
WantedBy=multi-user.target
EOL

systemctl enable $FRONTEND_SERVICE_NAME
systemctl start $FRONTEND_SERVICE_NAME
systemctl restart nginx

# Initial WireGuard config (empty) and start the interface
# The API will manage the peers from now on.
SERVER_PRIVATE_KEY=\$(cat /etc/wireguard/server_private_key)
SERVER_PUBLIC_KEY=\$(cat /etc/wireguard/server_public_key)

# The generate_wireguard_config function in the backend expects at least one client.
# We'll create an initial empty config and let the user add the first client via the UI.
cat > /etc/wireguard/wg0.conf << EOL
[Interface]
Address = 10.0.0.1/24
ListenPort = 51820
PrivateKey = $SERVER_PRIVATE_KEY
PostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
PostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
EOL

systemctl enable wg-quick@wg0
systemctl start wg-quick@wg0

# --- Setup Cron Job for YouTube IP Discovery ---
print_info "Setting up daily cron job to update YouTube IPs..."
# Create a cron job that runs the discovery script every day at 3:00 AM
(crontab -l 2>/dev/null; echo "0 3 * * * /usr/bin/python3 $BACKEND_DIR/youtube_engine/cdn_discovery.py >> /var/log/yt_ip_discovery.log 2>&1") | crontab -

print_info "Installation complete!"
print_info "You can now access the web interface at http://<your_vds_ip>"
