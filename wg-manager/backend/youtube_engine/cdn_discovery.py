import dns.resolver
import sys
import os
from concurrent.futures import ThreadPoolExecutor

# Add project root to path to allow importing from backend
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from config import settings

# Common domains used by YouTube for content delivery
YOUTUBE_DOMAINS = [
    "youtube.com",
    "googlevideo.com",
    "youtu.be",
    "www.youtube.com",
    "m.youtube.com",
    "ytimg.com",
    "s.ytimg.com",
    "ytstatic.com",
    "i.ytimg.com",
    # Regional and CDN specific subdomains
    "r1.googlevideo.com",
    "r2.googlevideo.com",
    "r3.googlevideo.com",
    "r4.googlevideo.com",
    "rr1.googlevideo.com",
    "rr2.googlevideo.com",
    "rr3.googlevideo.com",
    "rr4.googlevideo.com",
]

def resolve_domain(domain: str) -> set[str]:
    """Resolves a single domain to a set of IP addresses."""
    ips = set()
    try:
        # Resolve IPv4 addresses
        ipv4_answers = dns.resolver.resolve(domain, 'A')
        for rdata in ipv4_answers:
            ips.add(f"{rdata.address}/32")

        # Resolve IPv6 addresses
        ipv6_answers = dns.resolver.resolve(domain, 'AAAA')
        for rdata in ipv6_answers:
            ips.add(f"{rdata.address}/128")

    except (dns.resolver.NoAnswer, dns.resolver.NXDOMAIN, dns.resolver.Timeout):
        print(f"Could not resolve {domain}, skipping.")
    except Exception as e:
        print(f"An unexpected error occurred while resolving {domain}: {e}")
    return ips

def discover_youtube_ips(output_file: str):
    """
    Discovers YouTube CDN IPs by resolving common domains and writes them to a file.
    """
    print("Starting YouTube CDN IP discovery...")
    all_ips = set()

    with ThreadPoolExecutor(max_workers=10) as executor:
        future_to_domain = {executor.submit(resolve_domain, domain): domain for domain in YOUTUBE_DOMAINS}
        for future in future_to_domain:
            try:
                domain_ips = future.result()
                all_ips.update(domain_ips)
            except Exception as e:
                print(f"Error processing domain {future_to_domain[future]}: {e}")

    if not all_ips:
        print("Warning: No IPs were discovered. The output file will not be updated.")
        return

    print(f"Discovered {len(all_ips)} unique IP addresses. Writing to {output_file}...")

    try:
        with open(output_file, 'w') as f:
            f.write("# YouTube and Google Video IP Ranges\n")
            f.write("# Automatically generated by cdn_discovery.py\n\n")
            for ip in sorted(list(all_ips)):
                f.write(f"{ip}\n")
        print("Successfully updated the YouTube IP list.")
    except IOError as e:
        print(f"Error writing to output file {output_file}: {e}")

if __name__ == "__main__":
    # The output file path is taken from the main app's settings
    output_filepath = os.path.join(os.path.dirname(__file__), '..', settings.YOUTUBE_IPS_FILE)
    discover_youtube_ips(output_filepath)
